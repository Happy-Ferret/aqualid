Introduction:
============

  Aqualid is abstract build system.
  The main difference from many other build systems (like SCons, Waf, CMake, Qmake, make etc.) is
  that it's designed to build any type of entities. The most of build systems is designed to build
  files. Aqualid doesn't know anything about types of the building entities.
  Entity can be any type like file, string, URL, DB record etc.
  
  
  Main principles:
  ---------------
      
      Correctness
        Aqualid tracks changes in all input and output entities (many other build systems don't track changes in output files),
        as well as any changes in builder's flags.
        By default Aqualid uses MD5 checksum to track changes in files, but it can be esialy changed to use timestamps.
        
      Perfomance
        Goog perfomance is very important for any build system.
        Fast full builds and especially incrimental builds is the main reason why developers use build systems.
        Otherwise they would use simple shell/batch scripts.
        To improve build perfomance Aqualid tracks dependencies between targets and execute indepent targets in
        parrallel to better utillize available system resources like CPU, memory etc.
      
      Scaleability
        Build time depends from number building targets. An ideal implementation should be O(n).
        Aqualid tries to use eficient algorithms to track dependencies between targets.
        Also Aqualid tries to use minimal memory needed to build the remaining targets.
        It frees memory of already built targets.
        
      Flexible
        Aqualid allows to use any set of tools using customized flags in portable ways.
        For example it's easy to change compiler or specific version of compiler from command line.
        No project reconfiguration required.
        Any part of project can be built by certain compiler or certain version of compiler or with custom flags.
        
      Simple
        Aqualid build scripts are Python scripts.
        Structure of build scripts is very similiar to SCons build scripts, but it's not compartible with SCons build scripts.
        Declaration of building targets is like a function call. Result of this function can be passed to other functions.
      
  
Instalation

Project and options
  Structure and build/clean targets

Tools
  Configuration
  Builders

Build
  

